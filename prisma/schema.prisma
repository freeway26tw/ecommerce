generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            String        @id @default(uuid())
  account       String        @unique
  password      String
  name          String?
  avatar        String?
  type          String        @default("User")
  Shipping_Cart Cart[]
  Product       Product[]
  User_Address  UserAddress[]
  Order         Order[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model UserAddress {
  id        String   @id @default(uuid())
  userId    String
  address1  String
  address2  String
  city      String
  zip       String
  country   String
  mobile    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id          String        @id @default(uuid())
  userId      String
  total       Int
  paymentId   String
  user        User          @relation(fields: [userId], references: [id])
  OrderDetail OrderDetail[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model OrderDetail {
  id               String         @id @default(uuid())
  orderId          String
  productVariantId String
  quantity         Int
  order            Order          @relation(fields: [orderId], references: [id])
  productVariant   ProductVariant @relation(fields: [productVariantId], references: [id])
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
}

model Cart {
  id        String     @id @default(uuid())
  user      User       @relation(fields: [userId], references: [id])
  userId    String
  Cart_Item CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model CartItem {
  id        String   @id @default(uuid())
  cart      Cart     @relation(fields: [cartId], references: [id])
  cartId    String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id             String           @id @default(uuid())
  seller         User             @relation(fields: [sellerId], references: [id])
  sellerId       String
  name           String
  picture        String
  categoryId     String
  subCategoryId  String
  active         Boolean
  Cart_Item      CartItem[]
  category       Category         @relation(fields: [categoryId], references: [id])
  subCategory    SubCategory      @relation(fields: [subCategoryId], references: [id])
  ProductVariant ProductVariant[]
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
}

model ProductVariant {
  id          String        @id @default(uuid())
  productId   String
  product     Product       @relation(fields: [productId], references: [id])
  name        String
  desc        String
  price       Decimal
  quantity    Int
  picture     String
  OrderDetail OrderDetail[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model Category {
  id             String           @id @default(uuid())
  name           String
  picture        String
  desc           String
  Product        Product[]
  SubCategory    SubCategory[]
  CategoryBanner CategoryBanner[]
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
}

model SubCategory {
  id         String    @id @default(uuid())
  name       String
  categoryId String
  picture    String
  desc       String
  category   Category  @relation(fields: [categoryId], references: [id])
  Product    Product[]
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model CategoryBanner {
  id         String   @id @default(uuid())
  categoryId String
  picture    String
  type       Int
  category   Category @relation(fields: [categoryId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}
